/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package net.uweeisele.kafka.metrics.reporter.otel;

import io.opentelemetry.api.OpenTelemetry;
import net.uweeisele.kafka.metrics.reporter.otel.internal.Context;
import net.uweeisele.kafka.metrics.reporter.otel.internal.kafka.OtelKafkaMetricsReporter;
import net.uweeisele.kafka.metrics.reporter.otel.internal.yammer.OtelYammerMetricsReporter;
import org.apache.kafka.common.ClusterResource;
import org.apache.kafka.common.ClusterResourceListener;
import org.apache.kafka.common.metrics.KafkaMetric;
import org.apache.kafka.common.metrics.MetricsContext;
import org.apache.kafka.common.metrics.MetricsReporter;
import org.apache.kafka.server.metrics.KafkaYammerMetrics;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

public class OtelMetricsReporter implements MetricsReporter, ClusterResourceListener {

    public static final String CONFIG_KEY_OTEL_PREFIX = "otel.";
    public static final String CONFIG_KEY_OPENTELEMETRY_SUPPLIER = "opentelemetry.supplier";

    private static final Logger logger =
            LoggerFactory.getLogger(OtelMetricsReporter.class.getName());

    private OpenTelemetry openTelemetry;

    private OtelYammerMetricsReporter otelYammerMetricsReporter;
    private OtelKafkaMetricsReporter otelKafkaMetricsReporter;

    @Override
    public void onUpdate(ClusterResource clusterResource) {

    }

    @Override
    public void init(List<KafkaMetric> metrics) {
        metrics.forEach(this::metricChange);
    }

    @Override
    public void metricChange(KafkaMetric metric) {
        otelKafkaMetricsReporter.metricChange(metric);
    }

    @Override
    public void metricRemoval(KafkaMetric metric) {
        otelKafkaMetricsReporter.metricRemoval(metric);
    }

    @Override
    public void close() {
        otelKafkaMetricsReporter.close();
        otelYammerMetricsReporter.close();
    }

    @Override
    public void configure(Map<String, ?> configs) {
        logger.info("Configs: {}", configs);
        if (configs.containsKey(CONFIG_KEY_OPENTELEMETRY_SUPPLIER)) {
            OpenTelemetrySupplier openTelemetrySupplier =
                    getProperty(configs, CONFIG_KEY_OPENTELEMETRY_SUPPLIER, OpenTelemetrySupplier.class);
            openTelemetry = openTelemetrySupplier.get();
        } else {
            logger.info("Otel environment variables: {}", System.getenv().entrySet().stream().filter(e -> e.getKey().startsWith("OTEL")).collect(toList()));
            openTelemetry = SingletonOpenTelemetryProvider.get(configsWithPrefix(configs, CONFIG_KEY_OTEL_PREFIX, false));
        }

        //BufferPools.registerObservers(openTelemetry);
        //Classes.registerObservers(openTelemetry);
        //Cpu.registerObservers(openTelemetry);
        //MemoryPools.registerObservers(openTelemetry);
        //Threads.registerObservers(openTelemetry);
        //GarbageCollector.registerObservers(openTelemetry);
    }

    @Override
    public void contextChange(MetricsContext metricsContext) {
        logger.info("MetricsContext: {}", metricsContext.contextLabels());
        Context context = new Context().setMetricsContext(metricsContext);

        if (context.getNamespace().equals("kafka.server")) {
            if (otelYammerMetricsReporter != null) {
                KafkaYammerMetrics.defaultRegistry().removeListener(otelYammerMetricsReporter);
                otelYammerMetricsReporter.close();
            }
            otelYammerMetricsReporter = new OtelYammerMetricsReporter(openTelemetry.meterBuilder("otel.metrics.reporter.yammer").build(), context);
            KafkaYammerMetrics.defaultRegistry().addListener(otelYammerMetricsReporter);
        }

        if (otelKafkaMetricsReporter != null) {
            otelKafkaMetricsReporter.close();
        }
        otelKafkaMetricsReporter = new OtelKafkaMetricsReporter(openTelemetry.meterBuilder("otel.metrics.reporter.kafka").build(), context);
    }

    @SuppressWarnings("unchecked")
    private static <T> T getProperty(Map<String, ?> configs, String key, Class<T> requiredType) {
        Object value = configs.get(key);
        if (value == null) {
            throw new IllegalStateException("Missing required configuration property: " + key);
        }
        if (!requiredType.isInstance(value)) {
            throw new IllegalStateException(
                    "Configuration property " + key + " is not instance of " + requiredType.getSimpleName());
        }
        return (T) value;
    }

    private static Map<String, String> configsWithPrefix(Map<String, ?> configs, String prefix, boolean stripPrefix) {
        return configs.entrySet().stream()
                .filter(e -> e.getKey().startsWith(prefix))
                .map(e -> stripPrefix ?
                        Map.entry(e.getKey().substring(prefix.length()), stringOrNull(e.getValue()))
                        : Map.entry(e.getKey(), stringOrNull(e.getValue())))
                .collect(Collectors.toMap(Map.Entry::getKey,Map.Entry::getValue));
    }

    private static String stringOrNull(Object value) {
        return value != null ? String.valueOf(value) : null;
    }

}
